@AbapCatalog.sqlViewName: 'ZATS00IUCUST'
@AbapCatalog.compiler.compareFilter: true
@AbapCatalog.preserveKey: true
@AccessControl.authorizationCheck: #CHECK
@EndUserText.label: 'Unmanaged Scenario Base Later- Customer Data'
define view ZATS_00_I_U_CUSTOMER as select from /dmo/customer
association [1] to I_Country as _Country
    on $projection.country_code = _Country.Country {
    ///dmo/customer
    key customer_id as CustomerID,
    @Semantics.text: true
    first_name as FirstName,
    last_name as LastName,
    title as Title,
    street as Street,
    postal_code as PostalCode,
    city as City,
    country_code as CountryCd,
    phone_number as PhoneNo,
    email_address as EmailAddr,
    _Country // Make association public
}



@AbapCatalog.sqlViewName: 'ZATS00IUAGEN'
@AbapCatalog.compiler.compareFilter: true
@AbapCatalog.preserveKey: true
@AccessControl.authorizationCheck: #CHECK
@EndUserText.label: 'Unmanaged Scenario Base Later- Agency Data'
define view ZATS_00_I_U_agency as select from /dmo/agency
association [1] to I_Country as _Country
    on $projection.country_code = _Country.Country {
    ///dmo/customer
    ///dmo/agency
    key agency_id as AgencyId,
    @Semantics.text: true
    name as AgencyName,
    street as AStreet,
    postal_code as APostalCode,
    city as ACity,
    country_code as ACountry,
    phone_number as APhone,
    email_address as AEmailAddress,
    web_address as AWebAddress,
    _Country // Make association public
}



@AbapCatalog.sqlViewName: 'ZATS00CUTRAVEL'
@AbapCatalog.compiler.compareFilter: true
@AbapCatalog.preserveKey: true
@AccessControl.authorizationCheck: #CHECK
@EndUserText.label: 'Unmanaged Scenario Projection Layer - Consumption Travel'
@UI.headerInfo:{
    typeName: 'Travel',
    typeNamePlural: 'Travels'
}
@Search.searchable: true
define view ZATS_00_C_U_TRAVEL as select from /dmo/travel as Travel
association [1] to ZATS_00_I_U_agency as _Agency
    on $projection.AgencyId = _Agency.AgencyId
association [1] to ZATS_00_I_U_CUSTOMER as _Customer
    on $projection.CustomerId = _Customer.CustomerID
association [1] to I_Currency as _Currency
    on $projection.CurrencyCode = _Currency.Currency {
    //Travel
    @UI.facet: [{ purpose: #STANDARD , type: #IDENTIFICATION_REFERENCE,
    label: 'Details', position: 10 }]
    @UI.selectionField: [{position: 10 }]
    @UI.lineItem: [{position: 10, label: 'Travel No' }]
    @UI.identification: [{position: 10 }]
    key travel_id as TravelId,
    @UI.selectionField: [{position: 20 }]
    @EndUserText.label: 'Agency No'
    @UI.lineItem: [{position: 20 }]
    @UI.identification: [{position: 20 }]
    @ObjectModel.text.association: '_Agency'
    @Consumption.valueHelpDefinition: [{ entity:{ name: 'ZATS_00_I_U_agency', element: 'AgencyId'} }]
    @Search.defaultSearchElement: true
    @Search.fuzzinessThreshold: 0.7
    agency_id as AgencyId,
    @UI.selectionField: [{position: 30 }]
    @EndUserText.label: 'Customer No'
    @UI.lineItem: [{position: 30 }]
    @UI.identification: [{position: 30 }]
    @ObjectModel.text.association: '_Customer'
    @Consumption.valueHelpDefinition: [{ entity:{ name: 'ZATS_00_I_U_CUSTOMER', element: 'CustomerID'} }]
    @Search.defaultSearchElement: true
    @Search.fuzzinessThreshold: 0.7
    customer_id as CustomerId,
    begin_date as BeginDate,
    end_date as EndDate,
    booking_fee as BookingFee,
    @UI.lineItem: [{position: 40 }]
    @UI.identification: [{position: 40 }]
    total_price as TotalPrice,
    @UI.lineItem: [{position: 50 }]
    @UI.identification: [{position: 50 }]
    @Search.defaultSearchElement: true
    currency_code as CurrencyCode,
    @UI.lineItem: [{position: 60 }]
    @UI.identification: [{position: 60 }]
    description as Description,
    @UI.lineItem: [{position: 70 }]
    @UI.identification: [{position: 70 }]
    status as Status,
    _Agency,
    _Customer,
    _Currency
}


Local Types Section of global class

*"* use this source file for the definition and implementation of
*"* local helper classes, interface definitions and type
*"* declarations
class zcl_earth DEFINITION.
    public section.
    methods leave_orbit EXPORTING value(r_value) type string.
ENDCLASS.
class zcl_earth IMPLEMENTATION.
    method leave_orbit.
        r_value = 'the settelite is leaving earth orbit'.
    ENDMETHOD.
endclass.

class zcl_planet1 DEFINITION.
    public section.
    methods enter_orbit EXPORTING value(r_value) type string.
    methods leave_orbit EXPORTING value(r_value) type string.
ENDCLASS.
class zcl_planet1 IMPLEMENTATION.
    method enter_orbit.
        r_value = 'the settelite is entering planet1 orbit'.
    ENDMETHOD.
    method leave_orbit.
        r_value = 'the settelite is leaving planet1 orbit'.
    ENDMETHOD.
endclass.

class zcl_mars DEFINITION.
    public section.
    methods enter_orbit EXPORTING value(r_value) type string.
    methods land EXPORTING value(r_value) type string.
ENDCLASS.
class zcl_mars IMPLEMENTATION.
    method enter_orbit.
        r_value = 'the settelite is entering MARS orbit'.
    ENDMETHOD.
    method land.
        r_value = 'the settelite is landing on MARS, we found water'.
    ENDMETHOD.
endclass.


Global Class

CLASS zcl_ats_00_classpool DEFINITION
  PUBLIC
  FINAL
  CREATE PUBLIC .

  PUBLIC SECTION.
    data: itab type table of string.
    INTERFACES if_oo_adt_classrun.
    METHODS reachtomars.
  PROTECTED SECTION.
  PRIVATE SECTION.
ENDCLASS.

CLASS zcl_ats_00_classpool IMPLEMENTATION.
    METHOD reachtomars.
        data: lv_str type string.
        data(lo_earth) = new zcl_earth( ).
        data(lo_planet1) = new zcl_planet1( ).
        data(lo_mars) = new zcl_mars( ).
        "leave earth orbit
        lo_earth->leave_orbit( IMPORTING r_value = lv_str ).
        append lv_str to itab.
        "enter in planet 1
        lo_planet1->enter_orbit( IMPORTING r_value = lv_str ).
        append lv_str to itab.
        "leave plant1
        lo_planet1->leave_orbit( IMPORTING r_value = lv_str ).
        append lv_str to itab.
        "enter mars orbit
        lo_mars->enter_orbit( IMPORTING r_value = lv_str ).
        append lv_str to itab.
        "land on mars
        lo_mars->land( IMPORTING r_value = lv_str ).
        append lv_str to itab.
    ENDMETHOD.
    METHOD if_oo_adt_classrun~main.
        me->reachtomars( ).
        loop at itab into data(wa).
        out->write(
          EXPORTING
            data   = wa
*            name   =
*          RECEIVING
*            output =
        ).
        endloop.
    ENDMETHOD.
ENDCLASS.