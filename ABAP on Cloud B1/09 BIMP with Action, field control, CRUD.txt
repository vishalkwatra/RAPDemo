unmanaged implementation in class ZCL_ATS_00_U_TRAVEL unique;

define behavior for ZATS_00_C_U_TRAVEL //alias <alias_name>
//late numbering
//lock master
//etag master <field_name>
{
  field (readonly) TravelId;
  field (mandatory) AgencyId, CustomerId;
  create;
  update;
  delete;
  action set_booked result[1] $self;
}



@AbapCatalog.sqlViewName: 'ZATS00CUTRAVEL'
@AbapCatalog.compiler.compareFilter: true
@AbapCatalog.preserveKey: true
@AccessControl.authorizationCheck: #CHECK
@EndUserText.label: 'Unmanaged Scenario Projection Layer - Consumption Travel'
@UI.headerInfo:{
    typeName: 'Travel',
    typeNamePlural: 'Travels'
}
@Search.searchable: true
define root view ZATS_00_C_U_TRAVEL as select from /dmo/travel as Travel
association [1] to ZATS_00_I_U_agency as _Agency
    on $projection.AgencyId = _Agency.AgencyId
association [1] to ZATS_00_I_U_CUSTOMER as _Customer
    on $projection.CustomerId = _Customer.CustomerID
association [1] to I_Currency as _Currency
    on $projection.CurrencyCode = _Currency.Currency {
    //Travel
    @UI.facet: [{ purpose: #STANDARD , type: #IDENTIFICATION_REFERENCE,
    label: 'Details', position: 10 }]
    @UI.selectionField: [{position: 10 }]
    @UI.lineItem: [{position: 10, label: 'Travel No' }]
    @UI.identification: [{position: 100 }]
    key travel_id as TravelId,
    @UI.selectionField: [{position: 20 }]
    @EndUserText.label: 'Agency No'
    @UI.lineItem: [{position: 20 }]
    @UI.identification: [{position: 10 }]
    @ObjectModel.text.association: '_Agency'
    @Consumption.valueHelpDefinition: [{ entity:{ name: 'ZATS_00_I_U_agency', element: 'AgencyId'} }]
    @Search.defaultSearchElement: true
    @Search.fuzzinessThreshold: 0.7
    agency_id as AgencyId,
    @UI.selectionField: [{position: 30 }]
    @EndUserText.label: 'Customer No'
    @UI.lineItem: [{position: 30 }]
    @UI.identification: [{position: 20 }]
    @ObjectModel.text.association: '_Customer'
    @Consumption.valueHelpDefinition: [{ entity:{ name: 'ZATS_00_I_U_CUSTOMER', element: 'CustomerID'} }]
    @Search.defaultSearchElement: true
    @Search.fuzzinessThreshold: 0.7
    customer_id as CustomerId,
    @UI.identification: [{position: 30 }]
    begin_date as BeginDate,
    @UI.identification: [{position: 40 }]
    end_date as EndDate,
    @UI.identification: [{position: 50 }]
    @Semantics.amount.currencyCode: 'CurrencyCode'
    booking_fee as BookingFee,
    @UI.lineItem: [{position: 40 }]
    @UI.identification: [{position: 60 }]
    @Semantics.amount.currencyCode: 'CurrencyCode'
    total_price as TotalPrice,
    @UI.lineItem: [{position: 50 }]
    @UI.identification: [{position: 70 }]
    @Search.defaultSearchElement: true
    currency_code as CurrencyCode,
    @UI.lineItem: [{position: 60 }]
    @UI.identification: [{position: 80 }]
    description as Description,
    @UI.lineItem: [{position: 70 },{type: #FOR_ACTION, dataAction: 'set_booked', label: 'Anubhav Kills'}]
    @UI.identification: [{position: 90 }]
    status as Status,
    @UI.selectionField: [{position: 30 }]
    _Customer.CountryCd as Country,
    _Agency,
    _Customer,
    _Currency
}



CLASS zcl_demo_globe DEFINITION
  PUBLIC
  FINAL
  CREATE PUBLIC .

  PUBLIC SECTION.
  class-methods map_data IMPORTING im_data type ZATS_00_C_U_TRAVEL
                     returning value(r_bapi_data) type  /dmo/if_flight_legacy=>ts_travel_in.

  PROTECTED SECTION.
  PRIVATE SECTION.
ENDCLASS.



CLASS zcl_demo_globe IMPLEMENTATION.
METHOD map_data.
    r_bapi_data-agency_id = im_data-AgencyId .
    r_bapi_data-begin_date = im_data-BeginDate .
    r_bapi_data-booking_fee = im_data-BookingFee .
    r_bapi_data-currency_code = im_data-CurrencyCode .
    r_bapi_data-customer_id = im_data-CustomerId .
    r_bapi_data-description = im_data-Description .
    r_bapi_data-end_date = im_data-EndDate .
    r_bapi_data-status = im_data-Status .
    r_bapi_data-total_price = im_data-TotalPrice .
  ENDMETHOD.
ENDCLASS.




CLASS lhc_ZATS_00_C_U_TRAVEL DEFINITION INHERITING FROM cl_abap_behavior_handler.
  PRIVATE SECTION.

    METHODS create FOR MODIFY
      IMPORTING entities FOR CREATE ZATS_00_C_U_TRAVEL.

    METHODS delete FOR MODIFY
      IMPORTING keys FOR DELETE ZATS_00_C_U_TRAVEL.

    METHODS update FOR MODIFY
      IMPORTING entities FOR UPDATE ZATS_00_C_U_TRAVEL.

    METHODS read FOR READ
      IMPORTING keys FOR READ ZATS_00_C_U_TRAVEL RESULT result.

    METHODS set_booked for modify importing keys for action
                ZATS_00_C_U_TRAVEL~set_booked result results.

    methods map_data IMPORTING im_data type ZATS_00_C_U_TRAVEL
                     returning value(r_bapi_data) type  /dmo/if_flight_legacy=>ts_travel_in.
ENDCLASS.

CLASS lhc_ZATS_00_C_U_TRAVEL IMPLEMENTATION.
  METHOD map_data.
    r_bapi_data-agency_id = im_data-AgencyId .
    r_bapi_data-begin_date = im_data-BeginDate .
    r_bapi_data-booking_fee = im_data-BookingFee .
    r_bapi_data-currency_code = im_data-CurrencyCode .
    r_bapi_data-customer_id = im_data-CustomerId .
    r_bapi_data-description = im_data-Description .
    r_bapi_data-end_date = im_data-EndDate .
    r_bapi_data-status = im_data-Status .
    r_bapi_data-total_price = im_data-TotalPrice .
  ENDMETHOD.
  METHOD create.
    data: ls_travel_in type /dmo/if_flight_legacy=>ts_travel_in,
          ls_travel_out type /dmo/travel,
          lt_messages type /dmo/if_flight_legacy=>tt_message.
    loop at entities assigning field-symbol(<fs_travel_create>).

        ls_travel_in = zcl_demo_globe=>map_data( im_data = CORRESPONDING #( <fs_travel_create> ) ).
*       Unmanaged scenario, all the logic is written already and we are
*       Reusing the same
        call function '/DMO/FLIGHT_TRAVEL_CREATE'
          EXPORTING
            is_travel             = ls_travel_in
          IMPORTING
             es_travel             = ls_travel_out
             et_messages           = lt_messages
          .
        if lt_messages is INITIAL.
*        Filling the transaction buffer also
           insert value #( %cid = <fs_travel_create>-%cid
                           travelid = ls_travel_out-travel_id
                ) into table mapped-zats_00_c_u_travel.
        else.
           loop at lt_messages TRANSPORTING NO FIELDS where msgty = 'E' or msgty = 'A'.
            insert value #( %cid = <fs_travel_create>-%cid ) into table failed-zats_00_c_u_travel.
            return.
           ENDLOOP.
        endif.
    endloop.

  ENDMETHOD.

  METHOD delete.

    data: lt_messages type /dmo/if_flight_legacy=>tt_message,
          lv_travel_id type /dmo/travel_id.

    loop at keys assigning field-symbol(<to_be_deleted>).

      lv_travel_id = <to_be_deleted>-TravelId.

      call function '/DMO/FLIGHT_TRAVEL_DELETE'
      EXPORTING
        iv_travel_id = lv_travel_id
      IMPORTING
        et_messages  = lt_messages
      .

      loop at lt_messages TRANSPORTING NO FIELDS where msgty = 'E' or msgty = 'A'.

        insert value #( %cid = <to_be_deleted>-%cid_ref travelid = <to_be_deleted>-TravelId )
        into table failed-zats_00_c_u_travel.

      endloop.

    endloop.



  ENDMETHOD.

  METHOD update.

    data: ls_travel_in type /dmo/if_flight_legacy=>ts_travel_in,
          lt_message   type /dmo/if_flight_legacy=>tt_message,
          ls_travel_x  type /dmo/if_flight_legacy=>ts_travel_inx.

    loop at entities ASSIGNING FIELD-SYMBOL(<to_be_updated>).

        ls_travel_in = map_data( im_data = CORRESPONDING #( <to_be_updated> ) ).
        ls_travel_x-agency_id = xsdbool( <to_be_updated>-%control-AgencyId = cl_abap_behv=>flag_changed ).
        ls_travel_x-begin_date = xsdbool( <to_be_updated>-%control-BeginDate = cl_abap_behv=>flag_changed ).
        ls_travel_x-booking_fee = xsdbool( <to_be_updated>-%control-BookingFee = cl_abap_behv=>flag_changed ).
        ls_travel_x-currency_code = xsdbool( <to_be_updated>-%control-CurrencyCode = cl_abap_behv=>flag_changed ).
        ls_travel_x-customer_id = xsdbool( <to_be_updated>-%control-CustomerId = cl_abap_behv=>flag_changed ).
        ls_travel_x-description = xsdbool( <to_be_updated>-%control-Description = cl_abap_behv=>flag_changed ).
        ls_travel_x-end_date = xsdbool( <to_be_updated>-%control-EndDate = cl_abap_behv=>flag_changed ).
        ls_travel_x-status = xsdbool( <to_be_updated>-%control-Status = cl_abap_behv=>flag_changed ).
        ls_travel_x-total_price = xsdbool( <to_be_updated>-%control-TotalPrice = cl_abap_behv=>flag_changed ).
        ls_travel_in-travel_id = <to_be_updated>-TravelId.
        ls_travel_x-travel_id =  <to_be_updated>-TravelId.
        call function '/DMO/FLIGHT_TRAVEL_UPDATE'
          EXPORTING
            is_travel              = ls_travel_in
            is_travelx             = ls_travel_x
*            it_booking             =
*            it_bookingx            =
*            it_booking_supplement  =
*            it_booking_supplementx =
          IMPORTING
*            es_travel              =
*            et_booking             =
*            et_booking_supplement  =
            et_messages            = lt_message
          .
        loop at lt_message TRANSPORTING NO FIELDS where
        msgty = 'E' or msgty = 'A'.
            insert value #( travelid = <to_be_updated>-TravelId
                            %cid = <to_be_updated>-%cid_ref )
                            into table failed-zats_00_c_u_travel.
        endloop.

    endloop.

  ENDMETHOD.

  METHOD read.
  ENDMETHOD.

  method set_booked.

    data: lt_message type /dmo/if_flight_legacy=>tt_message,
          LV_TRAVEL_ID type /dmo/travel_id.

    loop at keys ASSIGNING FIELD-SYMBOL(<to_be_booked>).
        LV_TRAVEL_ID = <to_be_booked>-TravelId.
        call function '/DMO/FLIGHT_TRAVEL_SET_BOOKING'
          EXPORTING
            iv_travel_id = LV_TRAVEL_ID
          IMPORTING
            et_messages  = lt_message
          .

        loop at lt_message TRANSPORTING NO FIELDS WHERE msgty = 'E' or msgty = 'A'.
            insert value #( %cid = <to_be_booked>-%cid_ref
                            travelid = <to_be_booked>-TravelId
                    ) into table failed-zats_00_c_u_travel.
        ENDLOOP.
    ENDLOOP.


  ENDMETHOD.


ENDCLASS.

CLASS lsc_ZATS_00_C_U_TRAVEL DEFINITION INHERITING FROM cl_abap_behavior_saver.
  PROTECTED SECTION.

    METHODS check_before_save REDEFINITION.

    METHODS finalize          REDEFINITION.

    METHODS save              REDEFINITION.

ENDCLASS.

CLASS lsc_ZATS_00_C_U_TRAVEL IMPLEMENTATION.

  METHOD check_before_save.

  ENDMETHOD.

  METHOD finalize.
  ENDMETHOD.

  METHOD save.
    call function '/DMO/FLIGHT_TRAVEL_SAVE'
      .
  ENDMETHOD.

ENDCLASS.



CLASS zcl_demo_globe DEFINITION
  PUBLIC
  FINAL
  CREATE PUBLIC .

  PUBLIC SECTION.
  class-methods map_data IMPORTING im_data type ZATS_00_C_U_TRAVEL
                     returning value(r_bapi_data) type  /dmo/if_flight_legacy=>ts_travel_in.

  PROTECTED SECTION.
  PRIVATE SECTION.
ENDCLASS.





